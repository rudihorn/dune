(* -*- tuareg -*- *)

open Dune;;
open Stdune;;
open Fiber.O;;
open Memoization;;
open Memoization.Memoize;;
open Memoization_specs;;

Fiber.return 5;;
[%%expect{|
- : int Fiber.t = <abstr>
|}]

(* to run a computation *)
let run f v =
  let exn = ref None in
  try
    Fiber.with_error_handler (fun () -> f v) ~on_error:(fun e -> exn := Some e) |> Memoize.run_memoize |> Fiber.run
  with Fiber.Never ->
    Option.value ~default:Fiber.Never !exn |> raise;;

(* the trivial dependencies are simply the identity function *)
let compdep x = Fiber.return (x ^ x);;

(* our two dependencies are called some and another *)
let mcompdep1 = memoization "some" string_input_spec string_output_spec compdep;;
let mcompdep2 = memoization "another" string_input_spec string_output_spec compdep;;

(* compute the dependencies once so they are present in the
   global hash table *)
run mcompdep1 "a";;
run mcompdep2 "a";;

[%%expect{|
val run : ('a -> 'b Fiber.t) -> 'a -> 'b = <fun>
val compdep : string -> string Fiber.t = <fun>
val mcompdep1 : string -> string Fiber.t = <fun>
val mcompdep2 : string -> string Fiber.t = <fun>
- : string = "aa"
- : string = "aa"
|}]

(* define a counter so we can track how often our computation
   has been run *)
let counter = ref 0;;

(* our computation increases the counter, adds the two
   dependencies, "some" and "another" and works by multiplying
   the input by two *)
let comp x =
  Fiber.return x >>=
  mcompdep1 >>=
  mcompdep2 >>=
  (fun a -> counter := !counter + 1; String.sub a 0 (String.length a |> min 3) |> Fiber.return);;

let mcomp = memoization "test" string_input_spec string_output_spec comp;;

[%%expect{|
val counter : int ref = {contents = 0}
val comp : string -> string Fiber.t = <fun>
val mcomp : string -> string Fiber.t = <fun>
|}]

(* running it the first time should increase the counter,
   running it again should not, but should still return the
   same result *)
!counter;;
run mcomp "a";; 
!counter;;
run mcomp "a";; 
!counter;;

[%%expect{|
- : int = 0
- : string = "aaa"
- : int = 1
- : string = "aaa"
- : int = 1
|}]

get_deps "test" "a";;

[%%expect{|
- : (string * string) list option = Some [("another", "aa"); ("some", "a")]
|}]

(* running it on a new input should cause it to recompute
   the first time it is run *)
run mcomp "hello";; 
!counter;;
run mcomp "hello";; 
!counter;;

[%%expect{|
- : string = "hel"
- : int = 2
- : string = "hel"
- : int = 2
|}]

(* updating the first dependency should require recomputation of mcomp 7 *)
run mcompdep1 "testtest";;
run mcomp "hello";;
!counter;;
run mcomp "hello";;
!counter;;

[%%expect{|
- : string = "testtesttesttest"
- : string = "hel"
- : int = 2
- : string = "hel"
- : int = 2
|}]

let stack = ref [];;
let dump_stack v =
  get_call_stack >>| (fun s -> stack := s; v);;

let mcompcycle =
  let mcompcycle = CRef.deferred () in
  let compcycle x =
    Fiber.return x
    >>= dump_stack
    >>= (fun x ->
          counter := !counter + 1;
          if !counter < 20 then
            ((x + 1) mod 3) |> CRef.get mcompcycle
          else
            failwith "cycle"
        ) in
  memoization "cycle" int_input_spec string_output_spec compcycle |> CRef.set mcompcycle;
  CRef.get mcompcycle;;

[%%expect{|
val stack : '_weak1 list ref = {contents = []}
val dump_stack : 'a -> 'a Fiber.t = <fun>
val mcompcycle : (int, string) CRef.t = <fun>
|}]

counter := 0;
try
 run mcompcycle 5 |> ignore;
 None
with
 | Cycle_error.E exn ->
     let cycle = Cycle_error.filter ~name:"cycle" exn in
     Some cycle;;
!counter;;
!stack |> List.map ~f:(fun st -> Stack_frame.name st, Stack_frame.input st);;

[%%expect{|
- : string list option = Some ["2"; "1"; "0"; "2"]
- : int = 4
- : (string * string) list =
[("cycle", "2"); ("cycle", "1"); ("cycle", "0"); ("cycle", "5")]
|}]

let mfib =
  let mfib = CRef.deferred () in
  let compfib x =
    let mfib = CRef.get mfib in
    counter := !counter + 1;
    if x <= 1 then
      Fiber.return x
    else
      mfib (x - 1)
      >>= (fun r1 ->
        mfib (x - 2)
        >>| fun r2 -> r1 + r2) in
  memoization "fib" int_input_spec int_output_spec compfib |> CRef.set mfib;
  CRef.get mfib;;

counter := 0;
run mfib 2000;;
!counter;;
run mfib 1800;;

[%%expect{|
val mfib : (int, int) CRef.t = <fun>
- : int = 2406280077793834213
- : int = 2001
- : int = 3080005411477819488
|}]
