(* -*- tuareg -*- *)

open Stdune;;
open Dag;;

type mynode = {
  name : string;
}

let dag : mynode Dag.t = Dag.create ();;

let node = Dag.node dag { name = "root" };;
let node11 = Dag.node dag { name = "child 1 1" };;
let node12 = Dag.node dag { name = "child 1 2" };;
let node21 = Dag.node dag { name = "child 2 1" };;
let node31 = Dag.node dag { name = "child 3 1" };;

Dag.add node node11;;
Dag.add node node12;;
Dag.add node12 node21;;
Dag.add node21 node31;;

let pp_mynode fmt n =
  Format.fprintf fmt "%s" n.name;;
let dag_pp_mynode = (Dag.pp pp_mynode);;

#install_printer dag_pp_mynode;;

node;;

let node41 = Dag.node dag { name = "child 4 1" };;

Dag.add node31 node41;;

node;;
Dag.delta dag;;

Printf.printf "adding cyclic node\n%!";;
Dag.add node41 node;;
node;;

Printf.printf "%!";;

(* node;; *)

[%%expect{|
type mynode = { name : string; }
val dag : mynode t = <abstr>
val node : mynode node = <abstr>
val node11 : mynode node = <abstr>
val node12 : mynode node = <abstr>
val node21 : mynode node = <abstr>
val node31 : mynode node = <abstr>
- : unit = ()
- : unit = ()
- : unit = ()
- : unit = ()
val pp_mynode : Format.formatter -> mynode -> unit = <fun>
val dag_pp_mynode : Format.formatter -> mynode node -> unit = <fun>
- : mynode node =
(1: k=1, i=-10) (root) [(3: k=1, i=-9) (child 1 2) [(4: k=1, i=-8) (child 2 1) [
                                                    (5: k=1, i=-5) (child 3 1) [
                                                    ]; ]; ];
                         (2: k=1, i=-6) (child 1 1) []; ]

hello
|}]
